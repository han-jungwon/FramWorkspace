/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-09-14 04:48:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar", Long.valueOf(1600043477558L));
    _jspx_dependants.put("jar:file:/C:/framWorkspace/myBatisProject/WebContent/WEB-INF/lib/taglibs-standard-impl-1.2.5.jar!/META-INF/c.tld", Long.valueOf(1425946270000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   <!-- \r\n");
      out.write("      * 프레임 워크\r\n");
      out.write("      - 개발자가 보다 편리한 환경에서 개발할 수 있도록 제공하는 툴, 뼈대라고 생각하자\r\n");
      out.write("      - 사전적 정의로 '복잡한 문제를 해결하거나 서술하는데 사용하는 기본 개념 구조'\r\n");
      out.write("      - 소프트웨어 개발의 입자으로써는 공통으로 사용하는 라이브러리/ 개발도구/인터페이스 등등을 의미\r\n");
      out.write("      \r\n");
      out.write("      * 왜 프레임워크를 쓰는가\r\n");
      out.write("      - 웹프로그래밍의 추세는 엄청난 규모의 프로잭트가 많다.\r\n");
      out.write("       그렇게 거대하고 복잡도가 높은 프로잭트를 하기 위해서는 많은 사람들이 필요하게 되고\r\n");
      out.write("        그 개발자들이 '통일성'있게 '빠르고' '안정적'으로 개발하기 위해 프레임워크로 좋은 성과를 낼수 있다.-> 생산성 향상\r\n");
      out.write("        \r\n");
      out.write("        -> 자유롭게 설계하고 코딩하는것이 아니라 프레임워크가 제공하는 가이드 대로 설계하고 코딩을 하게 된다.\r\n");
      out.write("        -> 개발자를 위한 다양한 도구들이 지원\r\n");
      out.write("        -> 개발할 수 있는 범위가 정해져있다.\r\n");
      out.write("        -> 개발자들이 따라야하는 가이드라인을 제공한다.\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        * 프레임워크의 장점\r\n");
      out.write("        - 개발 시간을 줄일 수 있다.\r\n");
      out.write("        - 오류로 부터 자유로울 수 있다.\r\n");
      out.write("       * 프레임워크의 단점\r\n");
      out.write("       - 프레임워크에 너무 의존하면 개발자들의 능력이 떨어져서 프레임 워크없이 개발하는것이 어려워진다.\r\n");
      out.write("       \r\n");
      out.write("       \r\n");
      out.write("       * 프레임워크 종류\r\n");
      out.write("       - 영속성: 데이터 관련한(CRUD) 기능들을 보다 편리하게 작업할 수있도록 제공해주는 프레임워크ex) myBatis\r\n");
      out.write("       - 자바 : 웹 애플리케이션에 초점을 맞춰 필요한 요소들을 모듈화해서 제공해주는 프레임워크ex) spring\r\n");
      out.write("       - 화면구현: Front-End를 보다 쉽게 구현할 수 있게 틀을 제공하는 프레임워크ex) Bootstrap\r\n");
      out.write("       - 기능 및 지원 : 특정 기능이나 업무 수행에 도움을 줄 수 있는 기능을 제공하는 프레임워크ex) Log4j\r\n");
      out.write("       \r\n");
      out.write("       * 마이바티스 개요\r\n");
      out.write("       마이바티스는 개발자가 지정한 sql, 저장 프로시저 그리고 몇 가지 고급 매핑을 지원하는 영속성 프레임워크이다.\r\n");
      out.write("       JDBC로 처리하는 부분의 코드와 파라미터 설정 및 결과 매핑을 대신해준다.\r\n");
      out.write("       DB 원시 타입과 Map인터페이스 그리고 자바 POJO를 설정해서 매핑하기 위해 XML과 어노테이션을 사용할 수있다.\r\n");
      out.write("       \r\n");
      out.write("       Apache Project에서 ibatis를 운영하던 팀이 \r\n");
      out.write("       2010년 5월 9일 Google팀으로 이동하면서 MyBatis로 이름을 바꿈\r\n");
      out.write("       기존의 ibatis의 한계점이었던 동적쿼리 및 어노테이션 처리를 보강하여 더 나은 기능 제공\r\n");
      out.write("       ibatis는 현재 비활성화 상태, 기존에 ibatis로 애플리케이션의 지원을 위해 라이브러리만 제공하고있다.\r\n");
      out.write("       \r\n");
      out.write("       *  ibatis vs Mybatis\r\n");
      out.write("       1. ibatis는 JDK 1.4이상, mybatis는 JDK 1.5이상 사용이 가능하다.\r\n");
      out.write("       2. 패키지 구조 변경\r\n");
      out.write("          - ibatis : com.ibatis.*\r\n");
      out.write("          - mybatis : org..apache.ibatis.*\r\n");
      out.write("       3. 사용 용어 변경\r\n");
      out.write("          - SqlMapConfig -> Configuration \r\n");
      out.write("          - sqlMap -> Mapper\r\n");
      out.write("          - resultClass -> resultType\r\n");
      out.write("       4. 동적쿼리 지원\r\n");
      out.write("          - 쿼리문 작성 시 if,choose,trim,foreach문을 지원한다.\r\n");
      out.write("       5. 자바 어노테이션 지원\r\n");
      out.write("          \r\n");
      out.write("    -->\r\n");
      out.write("    \r\n");
      out.write("    <!-- \r\n");
      out.write("    \r\n");
      out.write("             * 환경 설정\r\n");
      out.write("             1. workspace 세팅 고고\r\n");
      out.write("             2. jstl,ojdbc6 라이브러리 추가\r\n");
      out.write("             3. 마이바티스 사용을 위해 https:// mybatis.org/mybatis-3/ko/getting-started.html\r\n");
      out.write("                -> 시작하기 클릭-> mybatis-x.x.x.jar 클릭 -> github로 이동 - > 3.4.6버전 찾기\r\n");
      out.write("             4. Java Resources에서 new -> Source Folder 추가(name: resources)\r\n");
      out.write("             \r\n");
      out.write("             5. resources폴더 안에 mybatis-config.xml 생성\r\n");
      out.write("             \r\n");
      out.write("          * DTD : XML 문서의 구조 및 해당 문서에서 사용할 수 있는 적법한 요소와 속성을 정의\r\n");
      out.write("                  이 문서가 유효한지 유효성 검사도 된다.\r\n");
      out.write("                  \r\n");
      out.write("          >> DTD 설정하기\r\n");
      out.write("          1) Window - preferences - XML - XML catalog - User Specified Entries - Add\r\n");
      out.write("             - Config\r\n");
      out.write("               Location : http://mybatis.org/dtd/mybatis-3-config.dtd => System Id로 사용\r\n");
      out.write("               Key type : Public ID\r\n");
      out.write("               key      : -//mybatis.org//DTD Config 3.0//EN\r\n");
      out.write("             - Mapper \r\n");
      out.write("               Location : http://mybatis.org/dtd/mybatis-3-mapper.dtd => System Id로 사용\r\n");
      out.write("               Key type : Public ID\r\n");
      out.write("               key      : -//mybatis.org//DTD Mapper 3.0//EN \r\n");
      out.write("               \r\n");
      out.write("            >> dtd 파일로 부터 xml 파일 생성\r\n");
      out.write("               1) resources 오른쪽 버튼 -> Next -> XML File -> Next \r\n");
      out.write("               2) Create XML file from a DTD File - Next\r\n");
      out.write("               3) Select XML Catalog entry - 해당 entry 선택 - 생성\r\n");
      out.write("               \r\n");
      out.write("            >> 이 성절은 이후 sqlsessionFactory 객체 생성 시 읽어가게 된다.\r\n");
      out.write("     -->\r\n");
      out.write("     <!-- ContextPath(프로잭트명) -> jsp/servlet 매번 request.getContextPath() -->\r\n");
      out.write("     ");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("     \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("\tWEB-INF 폴더는 WAS 서버가 관리하는 폴더이기 때문에 views폴더가 WEB-INF안에 있는 경우\r\n");
      out.write("\tWeb Server를 거치는 방식인 url창을 통해 접근할 수 없고\r\n");
      out.write("\t직접 WAS 서버에 경로를 이동하는 방식인 forward를 통해서만 접근할 수 있다.\r\n");
      out.write(" -->\r\n");
      out.write(" \r\n");
      out.write(" \t");
      if (true) {
        _jspx_page_context.forward("WEB-INF/views/main/main.jsp");
        return;
      }
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /index.jsp(99,5) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("contextPath");
      // /index.jsp(99,5) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/index.jsp(99,5) '${ pageContext.servletContext.contextPath }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${ pageContext.servletContext.contextPath }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /index.jsp(99,5) name = scope type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setScope("application");
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fscope_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }
}
